@startuml Bundle
class Bundle {
    +name: str
    +v: float
    +num_conductors: int
    +spacing: float
    +conductor: Conductor

    +verify_num(): void
    +calc_DSC(): float
    +calc_DSL(): float
}
@enduml

@startuml Bus
class Bus {
    +name: str
    +v: float
    +index: int

    +set_bus_v(bus_v: float): void
}
@enduml


@startuml Component
class "Component" as Outer {
    Abstract Class
}

class "Component.Resistor" as Inner {
    +name: str
    +resistance: float
    +bus1: str
    +bus2: str
    +g: float
    
    +calc_g(): void
}

class "Component.Load" as Inner2 {
    +name: str
    +power: float
    +voltage: float
    +bus: str
    +resistance: float
    +g: float

    +calc_r(): void
    +calc_g(): void
}

class "Component.VoltageSource" as Inner3 {
    +name: str
    +voltage: float
    +bus: str
}

Outer *-- Inner : contains
Outer *-- Inner2 : contains
Outer *-- Inner3 : contains
@enduml

@startuml Circuit
class Circuit {
    +name: str
    +i: float
    +table: list[str]
    +components: dict{str: component_object}
    +buses: {str: bus_object}
    +add_bus(name: str, index: int, voltage: float): void
    +add_resistor(name: str, r: float, bus1: str, bus2: str): void
    +add_load(name: str, power: float, bus1: str, bus2: str): void
    +add_voltage_source(name: str, v: float, bus: str): void
    +calc_i(): void
    +check_bus_names(index: int, name: str): void
}
@enduml

@startuml Conductor
class Conductor {
    +name: str
    +diam: float
    +radius: float
    +GMR: float
    +resistance: float
    +ampacity: float
}
@enduml

@startuml Geometry
class Geometry {
    +name: str
    +x: List[float]
    +y: List[float]

    +calc_Deq(): float
}
@enduml

@startuml Settings
class Settings {
    +freq: float
    +powerbase: float

    +set_freq(float): void
    +set_powerbase(float): void
}
@enduml

@startuml Solution
class Solution {
    +circuit: Circuit
}
@enduml