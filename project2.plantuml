@startuml Bundle
class Bundle {
    -name: str
    -v: float
    -num_conductors: int
    -spacing: float
    -conductor: Conductor

    +verify_num(): void
    +calc_DSC(): float
    +calc_DSL(): float
}
@enduml

@startuml Bus
class Bus {
    -name: str
    -v: float
    -index: int

    +set_bus_v(bus_v: float): void
}
@enduml


@startuml Component
class "Component" as Outer {
    Abstract Class
}

class "Component.Resistor" as Inner {
    -name: str
    -resistance: float
    -bus1: str
    -bus2: str

    +g: float
    
    +calc_g(): void
}

class "Component.Load" as Inner2 {
    -name: str
    -power: float
    -reactive: float
    -voltage: float
    -bus: str

    +resistance: float
    +g: float

    +calc_r(): void
    +calc_g(): void
}

class "Component.VoltageSource" as Inner3 {
    -name: str
    -voltage: float
    -bus: str
}

Outer *-- Inner : contains
Outer *-- Inner2 : contains
Outer *-- Inner3 : contains
@enduml

@startuml Circuit
class Circuit {
    -name: str
    +powerbase: float
    +count: int
    +i: Dict{str: float}
    +table: list[str]
    +components: dict{str: Component}
    +buses: {str: Bus}
    +conductors: {str: Conductor}
    +bundles: {str: Bundle}
    +geometries: {str: Geometry}

    +add_bus(name: str, voltage: float): void
    +add_resistor(name: str, r: float, bus1: str, bus2: str): void
    +add_load(name: str, power: float, reactive: float, voltage: float, bus: str): void
    +add_voltage_source(name: str, v: float, bus: str): void
    +add_tline_from_geometry(name: str, bus1: Bus, bus2: Bus, bundle: Bundle, geometry: Geometry, length: float)
    +add_tline_from_parameters(name: str, bus1: Bus, bus2: Bus, R: float, X: float, B: float)
    +add_transformer(name: str, bus1: Bus, bus2: Bus, power_rating: float, impedance_percent: float, 
                    x_over_r_ratio: float)
    +add_conductor(name: str, diam: float, GMR: float, resistance: float, ampacity: float)
    +add_bundle(name: str, num_conductors: int, spacing: float, conductor: Conductor)
    +add_geometry(name: str, x: list[float], y: list[float])
    +calc_Ybus(): DataFrame
    +check_bus_names(index: int, name: str): void
}
@enduml

@startuml Conductor
class Conductor {
    -name: str
    -diam: float
    -radius: float
    -GMR: float
    -resistance: float
    -ampacity: float
}
@enduml

@startuml Geometry
class Geometry {
    -name: str
    -x: list[float]
    -y: list[float]
    +Deq: float

    +calc_Deq(): float
}
@enduml

@startuml Settings
class Settings {
    -freq: float
    -powerbase: float

    +set_freq(float): void
    +set_powerbase(float): void
}
@enduml

@startuml Solution
class Solution {
    +circuit: Circuit
}
@enduml

@startuml Transformer
class Transformer {
    -name: str
    -bus1: Bus
    -bus2: Bus
    -power_rating: float
    -impedance_percent: float
    -x_over_r_ratio: float
    +Zpu: float
    +Ypu: float
    +yprim: DataFrame

    +calc_impedance(): complex
    +calc_admittance(): complex
    +calc_yprim(): DataFrame
}
@enduml

@startuml TransmissionLine
class TransmissionLine {
    -name: str
    -bus1: Bus
    -bus2: Bus
    -bundle: Bundle
    -geometry: Geometry
    -length: float
    +freq: float
    +powerbase: float
    +Zbase: float
    +R: float
    +X: float
    +Zseries: complex
    +Yseries: complex
    +Yshunt: complex
    +yprim: DataFrame

    +calc_R(): float
    +calc_X(): float
    +calc_B(): float
    +calc_yprim(): DataFrame
}
@enduml