@startuml Bundle
class Bundle {
    // Instance variables
    -name: str
    -num_conductors: int
    -spacing: float
    -conductor: Conductor
    +calc_DSC(): float
    +calc_DSL(): float
}
@enduml


@startuml Bus
class Bus {
    // Instance variables
    -name: str
    -base_kv: float
    -index: int
    +Vpu: float
    +V: float
    +angle: float
    +real_power: float
    +reactive_power: float
    +type: str

    // Methods
    +set_bus_v(v: float): void
    +set_angle(a: float): void
    +set_type(t: str): void
    +set_power(real: float, reactive: float): void
}
@enduml


@startuml Circuit
class Circuit {
    // Instance Variables
    - name: str
    + powerbase: float
    + buses: dict
    + conductors: dict
    + bundles: dict
    + geometries: dict
    + transmission_lines: dict
    + transformers: dict
    + loads: dict
    + generators: dict
    + count: int
    + slack_bus: str
    + slack_index: int
    + pq_indexes: list<int>
    + pv_indexes: list<int>
    + pq_and_pv_indexes: list<int>
    + bus_order: list<int>
    + Ybus: np.ndarray
    + x: pd.DataFrame
    + y: pd.DataFrame
    + voltages: np.ndarray
    + changed: bool

    // Methods
    + change_power_base(p: float): void
    + change_frequency(f: float): void
    + add_bus(name: str, voltage: float): void
    + add_load(name: str, bus: str, real: float, reactive: float): void
    + add_tline_from_geometry(name: str, bus1: str, bus2: str, bundle: str, geometry: str, length: float): void
    + add_tline_from_parameters(name: str, bus1: str, bus2: str, R: float, X: float, B: float): void
    + add_transformer(name: str, type: str, bus1: str, bus2: str, power_rating: float, impedance_percent: float, x_over_r_ratio: float, gnd_impedance=None): void
    + add_generator(name: str, bus: str, voltage: float, real_power: float, pos_imp: float = 0.0, neg_imp: float = 0.0, zero_imp: float = 0.0, gnd_imp: float = 0.0, var_limit: float = âˆž): void
    + add_conductor(name: str, diam: float, GMR: float, resistance: float, ampacity: float): void
    + add_bundle(name: str, num_conductors: int, spacing: float, conductor: Conductor): void
    + add_geometry(name: str, x: list<float>, y: list<float>): void
    + get_conductor(name: str): Conductor
    + get_bus(name: str): Bus
    + get_bundle(name: str): Bundle
    + get_geometry(name: str): Geometry
    + calc_Ybus(): np.ndarray
    + print_Ybus(): void
    + change_slack(old: str, new: str): void
    + compute_power_injection(x: pd.DataFrame, pq_and_pv_indexes: list<int>, pv_indexes: list<int>, pq_indexes: list<int>): pd.DataFrame
    + do_newton_raph(var_limit: bool = false): void
    + do_fast_decoupled(var_limit: bool = false): void
    + do_dc_power_flow(): void
    + to_rectangular(): np.ndarray
    + update_voltages_and_angles(): void
    + update_generator_power(): void
    + print_data(dcpowerflow: bool = false): void
}
@enduml


@startuml Conductor
class Conductor {
    // Instance variables
    - name: str
    - diam: float
    - GMR: float
    - resistance: float
    - ampacity: float
    + radius: float
}
@enduml


@startuml Generator
class Generator {
    // Instance variables
    - name: str
    - bus: str
    - voltage: float
    - real_power: float
    - Zn: float
    - var_limit: float
    + reactive_power: float
    + X0: complex
    + X1: complex
    + X2: complex
    + Y0prim: complex

    // Methods
    + calc_X0(X0: float): complex
    + calc_X1(X1: float): complex
    + calc_X2(X2: float): complex
    + set_power(real: float, reactive: float): void
    + calc_Y0prim(): complex
}
@enduml


@startuml Geometry
class Geometry {
    // Instance variables
    -name: str
    -x: list[float]
    -y: list[float]
    +Deq: float

    // Methods
    +calc_Deq(): float
}
@enduml


@startuml Load
class Load {
    // Instance variables
    -name: str
    -bus: str
    -real_power: float
    -reactive_power: float
    +Smag: float
    +S: float
    +pf: float
    +angle: float
}
@enduml


@startuml Settings
class Settings {
    // Instance variables
    -freq: float
    -powerbase: float

    // Methods
    +set_freq(float): void
    +set_powerbase(float): void
}
@enduml


@startuml NewtonRaphson
class NewtonRaphson {
    // Instance variables
    - circuit: Circuit
    - var_limit: bool
    + buses: dict
    + pv_indexes: list<int>
    + pq_indexes: list<int>
    + pq_and_pv_indexes: list<int>
    + slack_index: int
    + Ymag: np.ndarray
    + theta: np.ndarray
    + tolerance: float
    + xfull: pd.DataFrame
    + J1: pd.DataFrame
    + J2: pd.DataFrame
    + J3: pd.DataFrame
    + J4: pd.DataFrame

    // Methods
    + set_tolerance(tol: float): void
    + x_setup(): tuple
    + flat_start_y(): pd.DataFrame
    + y_setup(): tuple
    + calc_indexes(): void
    + newton_raph(): pd.DataFrame, pd.DataFrame
    + calc_J1_off_diag(M: int): void
    + calc_J1_on_diag(M: int): void
    + calc_J2_off_diag(M: int): void
    + calc_J2_on_diag(M: int): void
    + calc_J3_off_diag(M: int): void
    + calc_J3_on_diag(M: int): void
    + calc_J4_off_diag(M: int): void
    + calc_J4_on_diag(M: int): void
    + calc_y(xfull: pd.DataFrame): pd.DataFrame
    + check_var_limit(yfull: pd.DataFrame): dict
    + update_indexes(exceeded_gens: dict): void
}
@enduml


@startuml FastDecoupled
class FastDecoupled {
    // Instance variables
    - circuit: Circuit
    - var_limit: bool
    + pv_indexes: list<int>
    + pq_indexes: list<int>
    + buses: dict
    + slack_index: int
    + B: pd.DataFrame
    + tolerance: float
    + xfull: pd.DataFrame
    + yfull: pd.DataFrame
    + J1: any
    + J4: any

    // Methods
    + set_tolerance(tol: float): void
    + flat_start_y(): pd.DataFrame
    + setup(): tuple
    + calc_indexes(): void
    + fast_decoupled(): pd.DataFrame, pd.DataFrame
    + calc_J1(V: DataFrame): void
    + calc_J4(V: DataFrame): void
    + calc_y(xfull: DataFrame): pd.DataFrame
    + check_var_limit(yfull: DataFrame): dict
    + update_indexes(exceeded_gens: dict): void
}
@enduml


@startuml DCPowerFlow
class DCPowerFlow {
    // Instance variables
    - circuit: Circuit
    + slack_index: int
    + Bfull: np.ndarray
    + Pfull: pd.DataFrame
    + xfull: pd.DataFrame
    + yfull: pd.DataFrame

    // Methods
    + x_setup(): pd.DataFrame
    + y_setup(): pd.DataFrame
    + calc_B(): np.ndarray
    + calc_P(): pd.DataFrame
    + dc_power_flow(): pd.DataFrame, pd.DataFrame
}
@enduml


@startuml Transformer
class Transformer {
    // Instance variables
    - name : str
    - type : str
    - bus1 : Bus
    - bus2 : Bus
    - power_rating : float
    - impedance_percent : float
    - x_over_r_ratio : float
    - Znpu : complex
    + Zpu : complex
    + Ypu : complex
    + Y0pu : complex
    + yprim : DataFrame
    + yprim0 : DataFrame

    // Methods
    + calc_impedance() : complex
    + calc_yprim() : DataFrame
    + calc_yprim0() : DataFrame
}
@enduml


@startuml ThreePhaseFault
class ThreePhaseFault {
    // Instance variables
    - circuit: Circuit
    - faultbus: int
    + faultYbus: np.ndarray
    + faultZbus: np.ndarray
    + Ifn: float
    + Ipn: float
    + fault_voltages: np.ndarray

    // Methods
    + calc_faultYbus(): np.ndarray
    + calc_fault_values(): void
    + print_current(): void
    + print_voltages(): void
}
@enduml


@startuml ThreePhaseFaultParameters
class ThreePhaseFaultParameters {
    // Instance variablles
    - symfault: ThreePhaseFault
    - fault_bus_index: int

    // Methods
    + ThreePhase_fault_values(): pd.DataFrame, float
}
@enduml


@startuml TransmissionLine
class TransmissionLine {
  // Instance variables
  - name : str
  - bus1 : Bus
  - bus2 : Bus
  - bundle : Bundle
  - geometry : Geometry
  - length : float
  - flag : bool
  + freq : float
  + powerbase : float
  + Zbase : float
  + R : float
  + X : float
  + Zseries : complex
  + Z0series : complex
  + Yseries : complex
  + Y0series : complex
  + Yshunt : complex
  + yprim : DataFrame
  + yprim0 : DataFrame

  // Methods
  + from_parameters(name: str, bus1: Bus, bus2: Bus, R: float, X: float,
  B: float) : TransmissionLine
  + calc_R() : float
  + calc_X() : float
  + calc_B() : float
  + calc_yprim() : DataFrame
  + calc_yprim0() : DataFrame
}
@enduml


@startuml UnsymmetricalFaults
class UnsymmetricalFaults {
    // Instance variables
    - circuit: Circuit
    - faultbus: int
    + voltages: np.ndarray
    + Y0bus: np.ndarray
    + Z0bus: np.ndarray
    + Ypbus: np.ndarray
    + Zpbus: np.ndarray
    + Ynbus: np.ndarray
    + Znbus: np.ndarray
    + Ifn: float
    + Ipn: float
    + fault_voltages: np.ndarray

    // Methods
    + calc_zero(): np.ndarray
    + calc_positive(): np.ndarray
    + calc_negative(): np.ndarray
    + SLG_fault_values(): void
    + LL_fault_values(): void
    + DLG_fault_values(): void
}
@enduml


@startuml UnsymmetricalFaultParameters
class UnsymmetricalFaultParameters {
    // Instance varibales
    - unsymfault: UnsymmetricalFaults
    - faultbus: int
    - Zf: float
    + Z0: np.ndarray
    + Z1: np.ndarray
    + Z2: np.ndarray
    + a: complex
    + A: np.ndarray
    + Ainv: np.ndarray

    // Methods
    + SLG_fault_values(): np.ndarray, float, np.ndarray
    + LL_fault_values(): np.ndarray, float, np.ndarray
    + DLG_fault_values(): np.ndarray, float, np.ndarray
}
@enduml
